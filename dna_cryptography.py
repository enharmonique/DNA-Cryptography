import random


def encode_to_dna(binary_data, key):
    """
    Encode binary data into a DNA sequence using a substitution method.

    Parameters:
    - binary_data (str): Binary data to be encoded.
    - key (str): Secret key for seeding the random number generator.

    Returns:
    - str: Encoded DNA sequence.
    """
    # Seed the random number generator with the secret key
    random.seed(key)

    # Encode each bit of binary data into a DNA base
    dna_sequence = ""
    for bit in binary_data:
        if bit == '0':
            dna_sequence += random.choice('AC')
        elif bit == '1':
            dna_sequence += random.choice('GT')

    return dna_sequence


def decode_from_dna(dna_sequence, key):
    """
    Decode a DNA sequence back into binary data using a substitution method.

    Parameters:
    - dna_sequence (str): DNA sequence to be decoded.
    - key (str): Secret key for seeding the random number generator.

    Returns:
    - str: Decoded binary data.
    """
    # Seed the random number generator with the secret key
    random.seed(key)

    # Decode each DNA base into a binary bit
    binary_data = ""
    for base in dna_sequence:
        if base in 'AC':
            binary_data += '0'
        elif base in 'GT':
            binary_data += '1'

    return binary_data

#NOTE: base pairs complement each other so that their xor is 3.
BASE_TO_INT_ENCODE_DICT = {"A":0,"C":1,"G":2,"T":3}
INT_TO_BASE_ENCODE_DICT = {0:"A",1:"C",2:"G",3:"T"}

def encode_to_dna_xor(binary_data, key):
    """
    Encode binary data into a DNA sequence using a substitution method.

    Parameters:
    - binary_data (str): Binary data to be encoded.
    - key (str): Secret key for seeding the random number generator.

    Returns:
    - str: Encoded DNA sequence.
    """
    # Seed the random number generator with the secret key
    random.seed(key)

    global INT_TO_BASE_ENCODE_DICT
    bit_pairs = [binary_data[i:i+2] for i in range(0,len(binary_data),2)]
    
    # Encode each bit of binary data into a DNA base
    # In another application, if the direction of the initial DNA is not known, you wold add a prefix and suffix to detect that.
    dna_sequence = ""
    for bit_pair in bit_pairs:
        reprInt = int(bit_pair,base=2)
        randInt = random.randint(0,3)
        # encoded part is  xor random (generated by key)
        encodedInt = reprInt ^ randInt #xor
        dna_sequence += INT_TO_BASE_ENCODE_DICT[encodedInt]

    return dna_sequence


def decode_from_dna_xor(dna_sequence, key):
    """
    Decode a DNA sequence back into binary data using a substitution method.

    Parameters:
    - dna_sequence (str): DNA sequence to be decoded.
    - key (str): Secret key for seeding the random number generator.

    Returns:
    - str: Decoded binary data.
    """
    # Seed the random number generator with the secret key
    random.seed(key)
    global BASE_TO_INT_ENCODE_DICT

    # Decode each DNA base into a binary bit
    binary_data = ""
    for base in dna_sequence:
        encodedInt = BASE_TO_INT_ENCODE_DICT[base]
        randInt = random.randint(0,3)
        reprInt = encodedInt ^ randInt
        bit_pair = ('1' if reprInt>1 else '0') + ('1' if reprInt&1==1 else '0')
        binary_data += bit_pair

    return binary_data
